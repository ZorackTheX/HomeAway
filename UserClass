package homeAway;

import dataStructures.*;

public class UserClass implements User{
	
	private List<Travels> travels;
	private Dictionary<String, Home> homes;
	
		
	private String idUser;
	private String email;
	private String phone;
	private String name;
	private String nacionalidade;
	private String morada;

	public UserClass(String idUser, String email, String phone, String name, String nacionalidade, String morada) {
		this.idUser = idUser;
		this.email = email;
		this.phone = phone;
		this.name = name;
		this.nacionalidade = nacionalidade;
		this.morada = morada;
		
		new DoublyLinkedList<Home>();
		travels = new DoublyLinkedList<Travels>();
		homes = new ChainedHashTable<String, Home>();
		
	}
	
	public String getIdUser() {
		return idUser;
	}


	public String getEmail() {
		return email;
	}

	
	public String getPhone() {
		return phone;
	}

	
	public String getName() {
		return name;
	}

	
	public String getNacionalidade() {
		return nacionalidade;
	}

	
	public String getMorada() {
		return morada;
	}

	
	public void changeInfo(String email, String phone, String morada) {
		this.email = email;
		this.phone = phone;
		this.morada = morada;
		
	}
	
	public String getAllInfo() {
		return name + ": " + morada + ", " + nacionalidade + ", " + email + ", " + phone;
	}
	
	
//-----------Home--------//	
	
	public void addHome(Home home) {
		
		homes.insert(home.getIdHome(), home);
				
//		if(homesUser.isEmpty()) {
//			homesUser.addFirst(home);
//		}
//		else homesUser.addLast(home);
	}
	
	public void removeHome(String idHome) {

		homes.remove(idHome);
//		homesUser.remove(getHome(idHome));
	}
	
	public Home getHome(String idHome) {
		
		return homes.find(idHome);
		
//		Home home = null;
//		
//		for(int i= 0 ; i<homesUser.size(); i++) {
//			if(homesUser.get(i).getIdHome().equals(idHome)) {
//				home = homesUser.get(i);
//			}
//		}
//		return home;
	}
	
	public boolean hasHome() {
		if(!homes.isEmpty()) {
			return true;
		}
		return false;
	}
	
	public boolean isHomeEmpty() {
		if(homes.isEmpty()) {
			return true;
		}
		return false;
	}
	
	public Iterator<Entry<String, Home>> homeIterator(){
		return homes.iterator();
		
		
		//return homesUser.iterator();
	}
	
//----------Travels----------//	
	
	public Iterator<Travels> travelsIterator(){
		return travels.iterator();
	}
	
	public void addTravel(Home home, int points) {
		Travels travel = new TravelsClass(home, points);
		travels.addLast(travel);
	}
	
	public Home getHomeTravels() {
		Home home = null;
		
		for(int i= 0 ; i<travels.size(); i++) {
			home = travels.get(i).getHome();
		}
		return home;
	}
	
	public boolean hasTravels() {
		if(!travels.isEmpty()) {
			return true;
		}
		return false;
	}
	
}
